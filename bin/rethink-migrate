#! /usr/bin/env node
var meow = require('meow'),
  path = require('path'),
  migrate = require('../lib/migrate'),
  create = require('../lib/create');

var cli = meow([
    'Run all up migrations:',
    '  $ rethink-migrate up',
    '',
    'Run one down migration:',
    '  $ rethink-migrate down',
    '',
    'Run all down migrations:',
    '  $ rethink-migrate down -a',
    '  $ rethink-migrate down --all',
    '',
    'Options:',
    ' -l, --logLevel  debug | info | warning | error | none',
    ' -r, --root      Specify file root',
    ' -e, --env       development | sandbox | production',
    '',
    'Create a new migration script',
    '  $ rethink-migrate create [migration name]'
  ].join('\n'),
  {
    alias: {
        a: 'all',
        l: 'logLevel',
        r: 'root',
        e: 'env'
    }
  });

var command = cli.input[0];
var path = cli.flags.root ? path.resolve(cli.flags.root) : process.cwd();

if(command === 'up' || command === 'down') {
  var all = cli.flags.all;
  var logLevel = cli.flags.logLevel || 'info';
  var environment = cli.flags.e
  return migrate[command]({all: all, logLevel: logLevel, root: path, env: environment })
    .then(function (result) {
      process.exit(0);
    })
    .catch(function (err) {
      process.exit(1);
    });
} else if(command === 'create') {
  if(cli.input.length < 2) {
    return console.error('No migration name specified');
    process.exit(1);
  }
  create(cli.input[1], path)
    .then(function (filepath) {
      console.log('Created migration', filepath);
      process.exit(0);
    })
    .catch(function (err) {
      console.error(err);
      process.exit(1);
    });
} else {
  console.log(cli.help);
  process.exit(1);
}

process.stdin.resume();
